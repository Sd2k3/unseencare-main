#include <Wire.h>

const int MPU_addr1 = 0x68;
const int MPU_addr2 = 0x69;
int MPU_ADDRESS = -1;

int16_t ax, ay, az, gx, gy, gz;
bool isConnected = false;
unsigned long lastCheckTime = 0;
const unsigned long checkInterval = 2000;

const int buzzerPin = 5;
const int seizureThreshold = 1000;   // Adjust as needed
const unsigned long seizureDuration = 3000; // in milliseconds
unsigned long seizureStartTime = 0;
bool seizureOngoing = false;
bool buzzerActive = false;

// Use true for passive buzzer (tone), false for active buzzer
bool useTone = false;

void setup() {
  Serial.begin(9600);
  delay(1500);
  Serial.println("=== MPU6050 Diagnostic + Seizure Monitor ===");
  Wire.begin();
  pinMode(buzzerPin, OUTPUT);
  stopBuzzer();  // Ensure buzzer is off initially
  detectMPU();
}

void loop() {
  unsigned long currentTime = millis();

  if (isConnected) {
    Wire.beginTransmission(MPU_ADDRESS);
    Wire.write(0x3B);
    if (Wire.endTransmission(false) != 0) {
      Serial.println("‚ùå Connection lost! Trying to reconnect...");
      isConnected = false;
      stopBuzzer();
      return;
    }

    Wire.requestFrom(MPU_ADDRESS, 14, true);
    if (Wire.available() < 14) {
      Serial.println("‚ùå Incomplete data received!");
      isConnected = false;
      stopBuzzer();
      return;
    }

    ax = Wire.read() << 8 | Wire.read();
    ay = Wire.read() << 8 | Wire.read();
    az = Wire.read() << 8 | Wire.read();
    Wire.read(); Wire.read(); // Skip temperature
    gx = Wire.read() << 8 | Wire.read();
    gy = Wire.read() << 8 | Wire.read();
    gz = Wire.read() << 8 | Wire.read();

    Serial.print("AX:"); Serial.print(ax);
    Serial.print("\tAY:"); Serial.print(ay);
    Serial.print("\tAZ:"); Serial.print(az);
    Serial.print("\tGX:"); Serial.print(gx);
    Serial.print("\tGY:"); Serial.print(gy);
    Serial.print("\tGZ:"); Serial.println(gz);

    int totalAccel = abs(ax) + abs(ay) + abs(az);

    if (totalAccel > seizureThreshold) {
      if (!seizureOngoing) {
        seizureStartTime = currentTime;
        seizureOngoing = true;
        Serial.println("‚è≥ High movement started...");
      } else if (currentTime - seizureStartTime >= seizureDuration && !buzzerActive) {
        Serial.println("BUZZER ON");
        startBuzzer();
        buzzerActive = true;
      }
    } else {
      if (seizureOngoing || buzzerActive) {
        Serial.println("BUZZER OFF");
        seizureOngoing = false;
        buzzerActive = false;
        stopBuzzer();
      }
    }

    delay(200);
  }

  if (!isConnected && currentTime - lastCheckTime > checkInterval) {
    detectMPU();
    lastCheckTime = currentTime;
  }
}

void detectMPU() {
  Serial.println("üîç Scanning for MPU6050...");
  Wire.beginTransmission(MPU_addr1);
  if (Wire.endTransmission() == 0) {
    MPU_ADDRESS = MPU_addr1;
    isConnected = true;
    Serial.println("‚úÖ MPU6050 detected at 0x68.");
  } else {
    Wire.beginTransmission(MPU_addr2);
    if (Wire.endTransmission() == 0) {
      MPU_ADDRESS = MPU_addr2;
      isConnected = true;
      Serial.println("‚úÖ MPU6050 detected at 0x69.");
    } else {
      isConnected = false;
      Serial.println("‚ùå MPU6050 NOT FOUND at 0x68 or 0x69.");
    }
  }

  if (isConnected) {
    Wire.beginTransmission(MPU_ADDRESS);
    Wire.write(0x6B);
    Wire.write(0);
    Wire.endTransmission(true);
    Serial.println("‚úÖ MPU6050 Initialized.");
    Serial.println("üìä Live Data Stream Started...\n");
  }
}

void startBuzzer() {
  if (useTone) {
    tone(buzzerPin, 1000);  // Passive buzzer
  } else {
    digitalWrite(buzzerPin, LOW);  // Active buzzer ON
  }
  Serial.println("üîä Buzzer OFF");
}

void stopBuzzer() {
  if (useTone) {
    noTone(buzzerPin);
  } else {
    digitalWrite(buzzerPin, HIGH);  // Active buzzer OFF
  }
  Serial.println("üîá Buzzer ON");
}